#!/bin/sh -eET

function make_ca()
{
	# Begin make-ca.sh
	# Script to populate OpenSSL's CApath from a bundle of PEM formatted CAs
	#
	# The file certdata.txt must exist in the local directory
	# Version number is obtained from the version of the data.
	#
	# Authors: DJ Lucas
	#          Bruce Dubbs
	#
	# Version 20120211

	certdata="${1}"

	if [ ! -r $certdata ]; then
		echo "$certdata must be in the local directory"
		exit 1
	fi

	REVISION=$(grep CVS_ID $certdata | cut -f4 -d'$')

	if [ -z "${REVISION}" ]; then
		echo "$certfile has no 'Revision' in CVS_ID"
		exit 1
	fi

	VERSION=$(echo $REVISION | cut -f2 -d" ")

	TEMPDIR=$(mktemp -d)
	TRUSTATTRIBUTES="CKA_TRUST_SERVER_AUTH"
	BUNDLE="BuildSys-ca-bundle-${VERSION}.crt"
	CONVERTSCRIPT="$PKG_SPECDIR/make-cert.pl"
	SSLDIR="$DESTDIR/etc/ssl"

	mkdir "${TEMPDIR}/certs"

	# Get a list of staring lines for each cert
	CERTBEGINLIST=$(grep -n "^# Certificate" "${certdata}" | cut -d ":" -f1)

	# Get a list of ending lines for each cert
	CERTENDLIST=`grep -n "^CKA_TRUST_STEP_UP_APPROVED" "${certdata}" | cut -d ":" -f 1`

	# Start a loop
	for certbegin in ${CERTBEGINLIST}; do
		for certend in ${CERTENDLIST}; do
			if test "${certend}" -gt "${certbegin}"; then
				break
			fi
		done

		# Dump to a temp file with the name of the file as the beginning line number
		sed -n "${certbegin},${certend}p" "${certdata}" > "${TEMPDIR}/certs/${certbegin}.tmp"
	done

	unset CERTBEGINLIST CERTDATA CERTENDLIST certebegin certend

	mkdir -p certs
	rm -f certs/*      # Make sure the directory is clean

	for tempfile in ${TEMPDIR}/certs/*.tmp; do
		# Make sure that the cert is trusted...
		if grep "CKA_TRUST_SERVER_AUTH" "${tempfile}" | egrep "TRUST_UNKNOWN|NOT_TRUSTED" > /dev/null; then
			# Throw a meaningful error and remove the file
			cp "${tempfile}" tempfile.cer
			perl ${CONVERTSCRIPT} > tempfile.crt
			keyhash=$(openssl x509 -noout -in tempfile.crt -hash)
			echo "Certificate ${keyhash} is not trusted! Removing..."
			rm -f tempfile.cer tempfile.crt "${tempfile}"
			continue
		fi

		# If execution made it to here in the loop, the temp cert is trusted
		# Find the cert data and generate a cert file for it

		cp "${tempfile}" tempfile.cer
		perl ${CONVERTSCRIPT} > tempfile.crt
		if keyhash=$(openssl x509 -noout -in tempfile.crt -hash); then
			mv tempfile.crt "certs/${keyhash}.pem"
			rm -f tempfile.cer "${tempfile}"
			echo "Created ${keyhash}.pem"
		else
			echo "Certificate ${tempfile} is not trusted!  Removing..."
			rm -f tempfile.cer tempfile.crt "${tempfile}"
		fi
	done

	# Remove blacklisted files
	# MD5 Collision Proof of Concept CA
	if test -f certs/8f111d69.pem; then
		echo "Certificate 8f111d69 is not trusted!  Removing..."
		rm -f certs/8f111d69.pem
	fi

	# Finally, generate the bundle and clean up.
	cat certs/*.pem >  ${BUNDLE}
	rm -r "${TEMPDIR}"
}

function mydate()
{
	local y=$( echo $1 | cut -d" " -f4 )
	local M=$( echo $1 | cut -d" " -f1 )
	local d=$( echo $1 | cut -d" " -f2 )
	local m

	if [ ${d} -lt 10 ]; then d="0${d}"; fi

	case $M in
		Jan) m="01"
			;;
		Feb) m="02"
			;;
		Mar) m="03"
			;;
		Apr) m="04"
			;;
		May) m="05"
			;;
		Jun) m="06"
			;;
		Jul) m="07"
			;;
		Aug) m="08"
			;;
		Sep) m="09"
			;;
		Oct) m="10"
			;;
		Nov) m="11"
			;;
		Dec) m="12"
			;;
	esac

	certdate="${y}${m}${d}"
}

function remove_expired_certs()
{
	# Begin /bin/remove-expired-certs.sh
	#
	# Version 20120211

	# Make sure the date is parsed correctly on all systems
	OPENSSL=/tools/bin/openssl
	DIR=${DESTDIR}/etc/ssl/certs

	if [ $# -gt 0 ]; then
		DIR="$1"
	fi

	certs=$( find ${DIR} -type f -name "*.pem" -o -name "*.crt" )
	today=$( date +%Y%m%d )

	for cert in $certs; do
		notafter=$( $OPENSSL x509 -enddate -in "${cert}" -noout )
		date=$( echo ${notafter} |  sed 's/^notAfter=//' )
		mydate "$date"

		if [ ${certdate} -lt ${today} ]; then
			echo "${cert} expired on ${certdate}! Removing..."
			rm -f "${cert}"
		fi
	done
}

DESTDIR=${1}
cd $SRC_DIR
make_ca certdata.txt
remove_expired_certs certs

SSLDIR=${DESTDIR}/etc/ssl
install -d ${SSLDIR}/certs
cp -v certs/*.pem ${SSLDIR}/certs
c_rehash
install BuildSys-ca-bundle*.crt ${SSLDIR}/ca-bundle.crt
unset SSLDIR
