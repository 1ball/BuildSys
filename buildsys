#!/bin/bash -e

PATH=$PATH:/sbin:/usr/sbin
MYNAME="$(basename "$0")"
[ "$(uname -m)" = 'x86_64' ] && SET32=linux32
: ${DEVROOT_IN_SDK:="/root"}

print_help_and_exit()
{
	exec >&2
	echo -e "Usage:\n $MYNAME [Options] Command PackageName ..."
	echo "Options:"
	echo " --i686			Enter buildsys environment for i686 architecture"
	echo "			(default i686 if not specified)"
	echo " --arm			Enter buildsys environment for ARM architecture"
	echo " -s, --size N		Set lowest size limit of buildsys filesystem to N MB"
	echo "			(default: 1024)"
	echo " -C DIR, --dir DIR	Use DIR as buildsys root (default: current direcotry)"
	echo " -c, --continue		Resume previous buildsys process"
	echo " -f FILE, --config FILE	Use FILE as build config"
	echo "			(default: build-${ARCH:-i686}.conf)"
	echo " --shell		Get into buildsys environment"
	echo " --reset		Reset buildsys environment to initial state"
	echo " -j N, --jobs N		Build with N jobs running concurrently"
	echo "			(default N = number of CPUs)"
	echo " -h, --help		Print this help"
	echo "Command:"
	echo " unpack			Unpack only, don't build the package"
	echo " build			Build only, don't make target rootfs"
	echo "			(This is default if no Command specified)"
	echo " install		Install packages to rootfs"
	echo " gentar			Generate root filesystem tarball"
	echo " genext4		Generate ext4 root filesystem"
	echo " genliveiso		Generate livecd iso"
	echo " geninstiso		Generate root filesystem installation iso"
	echo " genrpm			Generate rpm package"
	echo " clean			Clean packages"
	echo " distclean		Dist clean package build directories and rootfs"
	echo " uninstall		Uninstall package from root directory in SDE"
	echo "PackageName:"
	echo " \"all\"			Build all packages specified in config file"
	echo "			(default all for empty PackageName)"
	echo " \"package name\"		Single or multiple package names overriding config file"
	exit
}

quit()
{
	set +e
	local TIMES DIRS=$(dirs -l -p | sed '1d')
	for DIR in $DIRS; do
		if [ -n "$VERBOSE" ]; then
			for TIMES in 1 2 3; do
				if ! umount $VERBOSE $DIR; then
					sleep 1
				else
					unset TIMES
					break
				fi
			done
			if [ -n "$TIMES" ]; then
				umount $VERBOSE -l $DIR
			fi
		else
			umount -lf $DIR
		fi
	done
	rm -f $LOCKFILE
	rmdir $SDE
}

source_var_from_conf()
{
	local FILE="$1" VARNAME VAR
	shift
	for VARNAME in $@; do
		VAR=$(eval "echo \$$VARNAME")
		if [ -z "$VAR" ]; then
			eval $(grep "^$VARNAME=.*" $FILE 2> /dev/null)
		fi
	done
}

GETOPTS=$(getopt -o scC:f:rj:lh --long arm,i686,size,continue,dir:,config:,shell,reset,jobs:,log,help -n "$0" -- "$@")
[ $? != 0 ] && print_help_and_exit
eval set -- "$GETOPTS"
set -a
while true; do
	case "$1" in
		--arm)
			export ARCH=arm; shift
			;;
		--i686)
			export ARCH=i686; shift
			;;
		-s | --size)
			export SDFS_SIZE="${2}"; shift 2
			;;
		-C | --dir)
			BS_ROOT="$2"; shift 2
			;;
		-f | --config)
			CONF="$2"
			INTERNOPTS+="$1 $DEVROOT_IN_SDK/${CONF} "; shift 2
			;;
		--shell)
			CMD="/tools/bin/bash --login +h"
			VERBOSE='--verbose'
			shift
			;;
		-r | --reset)
			CMD="reset"
			shift
			;;
		-h | --help)
			print_help_and_exit; shift
			;;
		--)
			shift ; break
			;;
		*)
			INTERNOPTS+="$1 "; shift
			;;
	esac
done
set +a

export PARAMS="$@"
if [ "$EUID" != 0 ]; then
	echo "You have to be root to run \"$MYNAME\"" >&2
	exec su root -c "${0} ${PARAMS}"
fi

: ${BS_ROOT:="$PWD"}
: ${INC_DIR:="$BS_ROOT/INC"}
: ${CONF:=$INC_DIR/default.conf}

for BUILD_CONF in "$CONF" "$INC_DIR/$CONF" 'NULL'; do
	[ -f "$BUILD_CONF" ] && break
done
if [ "$BUILD_CONF" = 'NULL' ]; then
	echo "Error: File $CONF not found in $INC_DIR"
	exit 1
fi

source_var_from_conf "$BUILD_CONF" SPECDIRS BSE_FS_SIZE ARCH
# Set defaults
: ${ARCH:="i686"}
: ${POOL:="$BS_ROOT/POOL"}
BUILD_ROOT="$BS_ROOT/BUILD/$(basename $(readlink $CONF))"
SDE="$BUILD_ROOT/SDE"
DEV_ROOT="$BUILD_ROOT/DEV_ROOT"
case $ARCH in
	i?86 | atom)
		SDKPATH=/tools/bin:/tools/sbin:/bin:/usr/bin:/sbin:/usr/sbin
		: ${SDFS_NAME:="buildsys-i686"}
		;;
	*)
		SDKPATH=/tools/bin:/tools/sbin
		: ${SDFS_NAME:="buildsys-$ARCH"}
		;;
esac
: ${SDK_URL:="ftp://w1ball.3322.org:2102/buildsys/${SDFS_NAME}.ext4.xz"}
SDFS="$BUILD_ROOT/$SDFS_NAME.ext4"
LOCKFILE="$BUILD_ROOT/.$SDFS_NAME.lock"

if [ -z "$SDFS_SIZE" ]; then
	if [ -n "$BSE_FS_SIZE" ]; then
		SDFS_SIZE=$BSE_FS_SIZE
	else
		SDFS_SIZE=1G
	fi
fi
SIZE_UNIT=${SDFS_SIZE: -1}
case ${SIZE_UNIT} in
	g|G)
		SDFS_SIZE=$((${SDFS_SIZE%$SIZE_UNIT}*1024*1024*1024))
		;;
	m|M)
		SDFS_SIZE=$((${SDFS_SIZE%$SIZE_UNIT}*1024*1024))
		;;
	k|K)
		SDFS_SIZE=$((${SDFS_SIZE%$SIZE_UNIT}*1024))
		;;
	[0-9])
		:
		;;
	*)
		echo "Error: Unknown format of filesystem size ${SDFS_SIZE}"
		exit 1
		;;
esac

case "$CMD" in
	'')
		CMD="/tools/bin/buildsys-internal $INTERNOPTS $@"
		;;
	reset)
		if [ -f "$LOCKFILE" ]; then
			echo "Error: $SDFS is in use"
			exit 1
		fi
		while true; do
			echo -n "Proceed reset buildsys for $BUILD_ROOT? (y/n) "
			read ANSWER
			case "$ANSWER" in
				[nN] | [Nn][Oo])
					echo "Buildsys reset canceled."
					exit
					;;
				[yY] | [Yy][Ee][Ss])
					break
					;;
				*)
					;;
			esac
		done
		echo -n "Resetting buildsys for $BUILD_ROOT... "
		rm -rf "$BUILD_ROOT" "$BS_ROOT/LOG/$(basename $CONF)"* "$BS_ROOT/GEN/$(basename $CONF)"*
		echo done.
		exit
		;;
esac

if [ ! -d "${SPECS:-$BS_ROOT/SPECS}" ]; then
	echo "Error: Directory \"$SPECS\" for SPECS not found"
	exit 1
fi
mkdir $VERBOSE -p $POOL $BS_ROOT/GEN $BS_ROOT/LOG $SDFS_DIR
install -m 0755 -d "$DEV_ROOT" "$SDE"
cd $DEV_ROOT
install -m 0755 -d INC SPECS BUILD ROOT POOL GEN LOG ${SPECDIRS[@]}
ln $VERBOSE -f $BS_ROOT/buildsys-internal 2> /dev/null || cp -a $BS_ROOT/buildsys-internal .
cd -

if [ -f $LOCKFILE ]; then
	echo "Error: $SDFS already in use"
	exit 1
else
	touch $LOCKFILE
fi

trap quit EXIT KILL

if [ ! -r ${SDFS} ]; then
	cd $POOL
	if [ ! -r ${SDFS_NAME}.ext4.xz ]; then
		wget -c -O ${SDFS_NAME}.ext4.xz.partial "${SDK_URL}"
		mv ${SDFS_NAME}.ext4.xz.partial ${SDFS_NAME}.ext4.xz
	fi
	xz -dkv ${SDFS_NAME}.ext4.xz
	mv -v ${SDFS_NAME}.ext4 $SDFS
	cd -
fi
if (( $(stat -c%s ${SDFS}) != ${SDFS_SIZE} )); then
	e2fsck -f ${SDFS}
	resize2fs ${SDFS} $((${SDFS_SIZE}/1024))K
fi

dirs -c
mount $VERBOSE -o loop -t ext4 "${SDFS}" "$SDE"
pushd -n "$SDE" &> /dev/null
mount $VERBOSE --bind /dev "$SDE/dev"
pushd -n "$SDE/dev" &> /dev/null
mount $VERBOSE -t devpts devpts "$SDE/dev/pts"
pushd -n "$SDE/dev/pts" &> /dev/null
mount $VERBOSE -t tmpfs shm "$SDE/dev/shm"
pushd -n "shm" &> /dev/null
mount $VERBOSE -t proc proc "$SDE/proc"
pushd -n "$SDE/proc" &> /dev/null
mount $VERBOSE -t sysfs sysfs "$SDE/sys"
pushd -n "$SDE/sys" &> /dev/null
mount $VERBOSE --bind "$DEV_ROOT" "$SDE/$DEVROOT_IN_SDK"
pushd -n "$SDE/$DEVROOT_IN_SDK" &> /dev/null
for DIR in INC POOL GEN LOG ${SPECDIRS[@]}; do
	mount $VERBOSE --bind "$BS_ROOT/$DIR" "$SDE/$DEVROOT_IN_SDK/$DIR"
	pushd -n "$SDE/$DEVROOT_IN_SDK/$DIR" &> /dev/null
done
ln $VERBOSE -sf "$DEVROOT_IN_SDK/buildsys-internal" "$SDE/tools/bin"
if [ -r "$SDE/tools/etc/hostname" ]; then
	read SDENAME < $SDE/tools/etc/hostname
fi
$SET32 /usr/sbin/chroot "$SDE" /tools/bin/env -i \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' HOSTNAME=$SDENAME \
    PATH=$SDKPATH TARCH=${ARCH} DEV_ROOT=$DEVROOT_IN_SDK \
	BUILD_CONF="$DEVROOT_IN_SDK/INC/$(basename ${CONF})" \
    $CMD
