#!/bin/bash -e

PATH=$PATH:/sbin:/usr/sbin
MYNAME="$(basename "$0")"
[ "$(uname -m)" = 'x86_64' ] && SET32=linux32
: ${DEVROOT_IN_SDK:="/root"}

sde_print_help_and_exit()
{
	exec >&2
	echo -e "Usage:\n $MYNAME [Options] [BuildSysRootDir]"
	echo "Options:"
	echo " --i686			Enter buildsys environment for i686 architecture"
	echo "			(this is default if not specified)"
	echo " --arm			Enter buildsys environment for ARM architecture"
	echo " -s, --size N		Set lowest size limit of buildsys filesystem to N MB"
	echo "			(default: 1024)"
	echo " -C DIR, --dir DIR	Use DIR as buildsys root (default: current direcotry)"
	echo " -h, --help		Print this help"
	echo "Command:"
	echo " enter			Get into buildsys environment"
	echo " reset			Reset buildsys environment to initial state"
	echo "			(reset all arch if not specified with --i686 or --arm)"
	exit
}

buildsys_print_help_and_exit()
{
	exec >&2
	echo -e "Usage:\n $MYNAME [Options] Command PackageName ..."
	echo "Options:"
	echo " --i686			Enter buildsys environment for i686 architecture"
	echo "			(default i686 if not specified)"
	echo " --arm			Enter buildsys environment for ARM architecture"
	echo " -s, --size N		Set lowest size limit of buildsys filesystem to N MB"
	echo "			(default: 1024)"
	echo " -C DIR, --dir DIR	Use DIR as buildsys root (default: current direcotry)"
	echo " -c, --continue		Resume previous buildsys process"
	echo " -f FILE, --config FILE	Use FILE as build config"
	echo "			(default: build-${SDKARCH:-i686}.conf)"
	echo " -j N, --jobs N		Build with N jobs running concurrently"
	echo "			(default N = number of CPUs)"
	echo " -h, --help		Print this help"
	echo "Command:"
	echo " unpack			Unpack only, don't build the package"
	echo " build			Build only, don't make target rootfs"
	echo "			(This is default if no Command specified)"
	echo " install			Install packages to rootfs"
	echo " gentar		Generate root filesystem tarball"
	echo " geniso		Generate root filesystem installation cd"
	echo " clean			Clean packages"
	echo " distclean		Dist clean package build directories and rootfs"
	echo " uninstall		Uninstall package from root directory in SDE"
	echo "PackageName:"
	echo " \"all\"			Build all packages specified in config file"
	echo "			(default all for empty PackageName)"
	echo " \"package name\"		Single or multiple package names overriding config file"
	exit
}

quit()
{
	set +e
	local TIMES DIRS=$(dirs -l -p | sed '1d')
	for DIR in $DIRS; do
		if [ -n "$VERBOSE" ]; then
			for TIMES in 1 2 3; do
				if ! umount $VERBOSE $DIR; then
					sleep 1
				else
					unset TIMES
					break
				fi
			done
			if [ -n "$TIMES" ]; then
				umount $VERBOSE -l $DIR
			fi
		else
			umount -lf $DIR
		fi
	done
	rm -f $LOCKFILE
	rmdir $SDE
}

if [ $MYNAME = sde ]; then
	GETOPTS=$(getopt -o sh --long arm,i686,size,help -n "$0" -- "$@")
	[ $? != 0 ] && ${MYNAME}_print_help_and_exit
	eval set -- "$GETOPTS"
	while true; do
		case "$1" in
			--arm)
				export ARCH=arm; shift
				;;
			--i686)
				export ARCH=i686; shift
				;;
			-s | --size)
				export SDFS_SIZE="$((${2}*1024*1024))"; shift 2
				;;
			-C | --dir)
				BS_ROOT="$2"; shift 2
				;;
			-h | --help)
				${MYNAME}_print_help_and_exit; shift
				;;
			--)
				shift ; break
				;;
			*)
				${MYNAME}_print_help_and_exit
				;;
		esac
	done
else
	MYNAME='buildsys'
	GETOPTS=$(getopt -o scC:f:j:h --long arm,i686,size,continue,dir:,config:,jobs:,help -n "$0" -- "$@")
	[ $? != 0 ] && ${MYNAME}_print_help_and_exit
	eval set -- "$GETOPTS"
	set -a
	while true; do
		case "$1" in
			--arm)
				export ARCH=arm; shift
				;;
			--i686)
				export ARCH=i686; shift
				;;
			-s | --size)
				SDFS_SIZE="$((${2}*1024*1024))"; shift 2
				;;
			-C | --dir)
				BS_ROOT="$2"; shift 2
				;;
			-f | --config)
				CONF="$2"
				INTERNOPTS+="$1 $DEVROOT_IN_SDK/${CONF} "; shift 2
				;;
			-h | --help)
				${MYNAME}_print_help_and_exit; shift
				;;
			--)
				shift ; break
				;;
			*)
				INTERNOPTS+="$1 "; shift
				;;
		esac
	done
	set +a
fi

export PARAMS="$@"
if [ "$EUID" != 0 ]; then
	echo "You have to be root to run \"$MYNAME\"" >&2
	exec su root -c "${0} ${PARAMS}"
fi

# Set defaults
: ${ARCH:="i686"}
: ${BS_ROOT:="$PWD"}
: ${INC_DIR:="$BS_ROOT/INC"}
: ${POOL:="$BS_ROOT/POOL"}
: ${SDFS_NAME:="buildsys-$ARCH"}
: ${SDFS_SIZE:="$((1*1024*1024*1024))"}
: ${SDK_URL:="ftp://w1ball.3322.org:2102/buildsys/${SDFS_NAME}.ext4.xz"}
: ${CONF:=$INC_DIR/build-$ARCH.conf}

for BUILD_CONF in "$CONF" "$INC_DIR/$CONF" 'NULL'; do
	[ -f "$BUILD_CONF" ] && break
done
if [ "$BUILD_CONF" = 'NULL' ]; then
	echo "Error: File $CONF not found in $INC_DIR"
	exit 1
fi

BUILD_ROOT="$BS_ROOT/BUILD/$(basename $CONF)"
SDE="$BUILD_ROOT/SDE"
LOCKFILE="$BUILD_ROOT/.$SDFS_NAME.lock"
SDFS="$BUILD_ROOT/$SDFS_NAME.ext4"
DEV_ROOT="$BUILD_ROOT/DEV_ROOT"
if [ "$ARCH" = 'i686' ]; then
    SDKPATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
else
    SDKPATH=/tools/bin
fi

if [ "$MYNAME" = sde ]; then
	case "$1" in
		enter | '')
			CMD="/tools/bin/bash --login +h"
			VERBOSE='--verbose'
			;;
		reset)
			if [ -f "$LOCKFILE" ]; then
				echo "Error: $SDFS is in use"
				exit 1
			fi
			while true; do
				echo -n "Proceed reset buildsys for $BUILD_ROOT? (y/n) "
				read ANSWER
				case "$ANSWER" in
					[nN] | [Nn][Oo])
						echo "Buildsys reset canceled."
						exit
						;;
					[yY] | [Yy][Ee][Ss])
						break
						;;
					*)
						;;
				esac
			done
			echo -n "Resetting buildsys for $BUILD_ROOT... "
			rm -rf "$BUILD_ROOT"
			echo done.
			exit
			;;
		*)
			${MYNAME}_print_help_and_exit
			;;
	esac
else
	CMD="/tools/bin/buildsys-internal $INTERNOPTS $@"
fi

if [ ! -d "${SPECS:-$BS_ROOT/SPECS}" ]; then
	echo "Error: Directory \"$SPECS\" for SPECS not found"
	exit 1
fi
mkdir $VERBOSE -p $POOL $BS_ROOT/GEN $BS_ROOT/LOG $SDFS_DIR
install -m 0755 -d "$DEV_ROOT" "$SDE"
cd $DEV_ROOT
install -m 0755 -d INC SPECS BUILD ROOT POOL GEN LOG
ln $VERBOSE -f $BS_ROOT/buildsys-internal
cd -

if [ -f $LOCKFILE ]; then
	echo "Error: $SDFS already in use"
	exit 1
else
	touch $LOCKFILE
fi

trap quit EXIT

if [ ! -r ${SDFS} ]; then
	cd $POOL
	if [ ! -r ${SDFS_NAME}.ext4.xz ]; then
		wget -c -O ${SDFS_NAME}.ext4.xz.partial "${SDK_URL}"
		mv ${SDFS_NAME}.ext4.xz.partial ${SDFS_NAME}.ext4.xz
	fi
	xz -dkv ${SDFS_NAME}.ext4.xz
	mv ${SDFS_NAME}.ext4 $SDFS
	cd -
fi
if (( $(stat -c%s ${SDFS}) < ${SDFS_SIZE} )); then
	e2fsck -f ${SDFS}
	resize2fs ${SDFS} $((${SDFS_SIZE}/1024))K
fi

dirs -c
mount $VERBOSE -o loop -t ext4 "${SDFS}" "$SDE"
pushd -n "$SDE" &> /dev/null
mount $VERBOSE --bind /dev "$SDE/dev"
pushd -n "$SDE/dev" &> /dev/null
mount $VERBOSE -t devpts devpts "$SDE/dev/pts"
pushd -n "$SDE/dev/pts" &> /dev/null
mount $VERBOSE -t tmpfs shm "$SDE/dev/shm"
pushd -n "/run/shm" &> /dev/null
mount $VERBOSE -t proc proc "$SDE/proc"
pushd -n "$SDE/proc" &> /dev/null
mount $VERBOSE -t sysfs sysfs "$SDE/sys"
pushd -n "$SDE/sys" &> /dev/null
mount $VERBOSE --bind "$DEV_ROOT" "$SDE/$DEVROOT_IN_SDK"
pushd -n "$SDE/$DEVROOT_IN_SDK" &> /dev/null
for DIR in SPECS INC POOL GEN LOG; do
	mount $VERBOSE --bind "$BS_ROOT/$DIR" "$SDE/$DEVROOT_IN_SDK/$DIR"
	pushd -n "$SDE/$DEVROOT_IN_SDK/$DIR" &> /dev/null
done
ln $VERBOSE -sf "$DEVROOT_IN_SDK/buildsys-internal" "$SDE/tools/bin"
if [ -r "$SDE/tools/etc/hostname" ]; then
	read SDENAME < $SDE/tools/etc/hostname
fi
$SET32 /usr/sbin/chroot "$SDE" /tools/bin/env -i \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' HOSTNAME=$SDENAME \
    PATH=$SDKPATH ARCH=${ARCH} DEV_ROOT=$DEVROOT_IN_SDK \
    $CMD
